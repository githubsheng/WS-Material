.material {
    position: relative; /*set the position of the container to be relative because one or more of its children needs to be absolutely positioned.*/
    margin: 1.2em 0; /*adds a top/bottom margin*/
}

.material label {
    position: absolute; /*set position to absolute for z-index to work and to position label on top of input (before transform)*/
    z-index: 1; /*set label's z-index to 1 and set input's z-index to 2 label does not blocks the input*/
    bottom: 100%; /*place label on top of the input*/
    left: 0;

    /*
    transform the label and move it 28 px towards bottom so that the label (originally placed on top of the input) now appears to be positioned
    as if its placeholder. in browsers where transform does not work, the label remains on top of the input.
    */
    -webkit-transform: translate3d(0, 28px, 0) scale(1);
    transform: translate3d(0, 28px, 0) scale(1);

    transition: -webkit-transform .4s cubic-bezier(.25, .8, .25, 1);
    transition: transform .4s cubic-bezier(.25, .8, .25, 1);
    -webkit-transform-origin: left top;
    transform-origin: left top;

    max-width: 100%;
    margin: 0; /*remove default styling added by browser*/

    /*font related.*/
    color: #9E9E9E; /*simulate placeholder and hence gray*/
    font-weight: normal;
    font-size: 1.2em;
}

.material label.focus, .material label.hasValue{
    color: #006600;
    /*
    transform into the look of normal label from the look of placeholder, if transform does not work, the label remains on top of the input,
    rather than staying at the placeholder position.
    */
    -webkit-transform: translate3d(0, 6px, 0) scale(.75);
    transform: translate3d(0, 6px, 0) scale(.75);
}

.material label.focus.error, .material label.hasValue.error {
    color: #dd2c00;
}

.material input {
    position: relative; /*set position to relative so that z-index can work*/
    z-index: 2; /*make sure that input is not blocked by label*/

    width: 100%;
    padding: 0.15em 0;
    background: transparent;
    outline: none;
    border: none;

    border-bottom: 1px solid #9E9E9E;

    /*font related;*/
    font-weight: normal;
    font-size: 1.2em;
}

.material input.error {
    border-color: #dd2c00;
}

.material input.active {
    border-color: #77aa43;
}

.material .positionRef {
    position: relative;
    width: 30px;
    height: 30px;
}

.material .positionRef .round-button {
    position: absolute;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    line-height: 30px;
    text-align: center;
    box-shadow: 0 0 2px 1px darkgray;

    color: #006600;
    background: white;
    transition: 0.2s; /*for box shadow transition when hovered*/
}

.material .positionRef .round-button:hover {
    cursor: pointer;
    box-shadow: 0 0 2px 1px #006600;
}

.material .positionRef .ripple {
    position: absolute;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    transition: 0.5s;
    background: #006600;
    opacity: 0.7;
    transform: scale(0.9, 0.9);
}

.material .positionRef .ripple.mousedown {
    opacity: 0.9;
    transform: scale(1.3, 1.3);
}

.material .positionRef .ripple.mouseup {
    opacity: 0;
    transform: scale(1.5, 1.5);
}







